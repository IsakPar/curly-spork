name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        options: >-
          --health-cmd="pg_isready -U postgres -d postgres"
          --health-interval=10s
          --health-timeout=10s
          --health-retries=30

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd="redis-cli ping || exit 1"
          --health-interval=10s
          --health-timeout=10s
          --health-retries=30

    env:
      CI: true
      NODE_ENV: test
      STORAGE_DRIVER: memory
      # Use internal service hostnames (set both for compatibility)
      DATABASE_URL: postgres://postgres:postgres@postgres:5432/postgres
      POSTGRES_URL: postgres://postgres:postgres@postgres:5432/postgres
      REDIS_URL: redis://redis:6379
      # JWT defaults to avoid schema failures
      JWT_SECRET: test-secret-min-32-chars-long-for-security
      JWT_ISSUER: sanctum-auth
      JWT_AUDIENCE: sanctum-client
      # Disable captcha/externals in CI
      CAPTCHA_PROVIDER: none
      KMS_MODE: inmemory
      RATE_LIMIT_DISABLED: 'true'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Enable corepack
        run: corepack enable

      - name: Prepare pnpm via corepack
        run: corepack prepare pnpm@9 --activate

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Print environment for debugging
        run: |
          node -v
          pnpm -v
          echo "WORKSPACE DIR: $(pwd)"
          ls -la

      - name: Install PostgreSQL and Redis clients
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y postgresql-client redis-tools
          echo "‚úÖ Installed pg_isready and redis-cli"
          pg_isready --version
          redis-cli --version

      - name: Wait for Postgres
        shell: bash
        run: |
          echo "üîç Checking Postgres DNS resolution..."
          getent hosts postgres || echo "‚ö†Ô∏è  DNS not yet resolved (normal in CI)"
          
          echo "‚è≥ Waiting for Postgres to be ready..."
          for i in {1..60}; do
            echo "  Attempt $i/60: Testing Postgres with pg_isready..."
            
            # Use pg_isready to properly check if Postgres is accepting queries
            if pg_isready -h postgres -p 5432 -U postgres -d postgres -t 5 2>&1 | grep -q "accepting connections"; then
              echo "‚úÖ Postgres is accepting connections!"
              
              # Double-check with a simple query
              if PGPASSWORD=postgres psql -h postgres -U postgres -d postgres -c "SELECT 1" >/dev/null 2>&1; then
                echo "‚úÖ Postgres is fully ready and accepting queries!"
                break
              else
                echo "‚ö†Ô∏è  Postgres accepting connections but not ready for queries yet..."
              fi
            fi
            
            if [ $i -eq 60 ]; then
              echo "‚ùå ERROR: Postgres failed to become ready after 3 minutes"
              echo "üìã Debugging info:"
              getent hosts postgres || echo "Cannot resolve postgres hostname"
              echo "Last pg_isready output:"
              pg_isready -h postgres -p 5432 -U postgres -d postgres -t 5 || true
              exit 1
            fi
            
            sleep 3
          done
          echo "‚úÖ Postgres is READY!"

      - name: Wait for Redis
        shell: bash
        run: |
          echo "üîç Checking Redis DNS resolution..."
          getent hosts redis || echo "‚ö†Ô∏è  DNS not yet resolved (normal in CI)"
          
          echo "‚è≥ Waiting for Redis to be ready..."
          for i in {1..60}; do
            echo "  Attempt $i/60: Testing Redis with redis-cli..."
            
            # Use redis-cli to properly check if Redis is responding
            if redis-cli -h redis -p 6379 ping 2>&1 | grep -q "PONG"; then
              echo "‚úÖ Redis is responding to PING!"
              
              # Additional check: try to set and get a test key
              if redis-cli -h redis -p 6379 SET test_key "ready" >/dev/null 2>&1; then
                echo "‚úÖ Redis is fully ready and accepting commands!"
                redis-cli -h redis -p 6379 DEL test_key >/dev/null 2>&1
                break
              else
                echo "‚ö†Ô∏è  Redis responding to PING but not ready for commands yet..."
              fi
            fi
            
            if [ $i -eq 60 ]; then
              echo "‚ùå ERROR: Redis failed to become ready after 3 minutes"
              echo "üìã Debugging info:"
              getent hosts redis || echo "Cannot resolve redis hostname"
              echo "Last redis-cli ping attempt:"
              redis-cli -h redis -p 6379 ping || true
              exit 1
            fi
            
            sleep 3
          done
          echo "‚úÖ Redis is READY!"

      - name: Typecheck
        run: pnpm typecheck

      - name: Lint
        run: pnpm lint

      - name: Run tests with coverage
        run: pnpm test

      - name: Enforce coverage thresholds
        run: pnpm run check:coverage

